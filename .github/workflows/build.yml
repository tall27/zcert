name: Build and Release

on:
  push:
    branches: [ main, feature/new-branch ]
    tags: [ 'v*' ]
  pull_request:
    branches: [ main ]

jobs:
  build:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        include:
          - goos: linux
            goarch: amd64
            suffix: ""
          - goos: darwin
            goarch: amd64
            suffix: ""
          - goos: darwin
            goarch: arm64
            suffix: ""
          - goos: windows
            goarch: amd64
            suffix: ".exe"

    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: '1.21'

    - name: Get dependencies
      run: go mod download

    - name: Run security scan
      run: |
        go vet ./...
        go mod verify

    - name: Run tests
      run: go test -v ./...

    - name: Get build info
      id: build_info
      run: |
        echo "version=1.0.0" >> $GITHUB_OUTPUT
        echo "commit=$(git rev-parse --short HEAD)" >> $GITHUB_OUTPUT
        echo "build_time=$(date -u '+%Y-%m-%d_%H:%M:%S_UTC')" >> $GITHUB_OUTPUT
        echo "go_version=$(go version | awk '{print $3}')" >> $GITHUB_OUTPUT

    - name: Build binary
      env:
        GOOS: ${{ matrix.goos }}
        GOARCH: ${{ matrix.goarch }}
      run: |
        LDFLAGS="-X main.Version=${{ steps.build_info.outputs.version }} -X main.GitCommit=${{ steps.build_info.outputs.commit }} -X main.BuildTime=${{ steps.build_info.outputs.build_time }} -X main.GoVersion=${{ steps.build_info.outputs.go_version }}"
        go build -ldflags "$LDFLAGS" -o zcert${{ matrix.suffix }} main.go

    - name: Test binary
      if: matrix.goos == 'linux'
      run: ./zcert --version

    - name: Create archive
      run: |
        if [ "${{ matrix.goos }}" = "windows" ]; then
          zip zcert-${{ steps.build_info.outputs.version }}-${{ matrix.goos }}-${{ matrix.goarch }}.zip zcert${{ matrix.suffix }}
        else
          tar -czf zcert-${{ steps.build_info.outputs.version }}-${{ matrix.goos }}-${{ matrix.goarch }}.tar.gz zcert${{ matrix.suffix }}
        fi

    - name: Upload artifacts
      uses: actions/upload-artifact@v4
      with:
        name: zcert-${{ matrix.goos }}-${{ matrix.goarch }}
        path: zcert-${{ steps.build_info.outputs.version }}-${{ matrix.goos }}-${{ matrix.goarch }}.*

  release:
    needs: build
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/v')
    steps:
    - name: Download all artifacts
      uses: actions/download-artifact@v4

    - name: Create Release
      uses: softprops/action-gh-release@v1
      with:
        files: |
          */zcert-*.tar.gz
          */zcert-*.zip
        generate_release_notes: true
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}