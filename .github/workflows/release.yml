name: Release zcert

on:
  workflow_dispatch:
    inputs:
      version:
        description: 'Release version (e.g., 1.2.0)'
        required: true
        default: '1.2.0'
  push:
    branches:
    - main

# Grant permissions to write contents (for releases) and read actions (for artifacts)
permissions:
  contents: write
  actions: read

env:
  OPENSSL_VERSION: "3.5.0"
  OQS_PROVIDER_VERSION: "0.7.0"
  # The repository where dependency artifacts are stored
  COMPILE_REPO: "tall27/compile"

jobs:
  # ------------------------------------------------------------------
  # 1. CHECK DEPENDENCIES
  #    This job verifies that all required artifacts exist before proceeding.
  # ------------------------------------------------------------------
  check-dependencies:
    runs-on: ubuntu-latest
    outputs:
      openssl-exists: ${{ steps.report-status.outputs.openssl-found }}
      oqs-exists: ${{ steps.report-status.outputs.oqs-found }}
      version: ${{ steps.set-version.outputs.version }}
    steps:
      - name: Set version variable
        id: set-version
        run: |
          # If triggered by workflow_dispatch, use the provided version
          # If triggered by push, use a version based on date
          if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            echo "version=${{ github.event.inputs.version }}" >> $GITHUB_OUTPUT
            echo "Using provided version: ${{ github.event.inputs.version }}"
          else
            DATE_VERSION=$(date +'%Y.%m.%d')
            GIT_SHORT_SHA=$(echo ${{ github.sha }} | cut -c1-7)
            AUTO_VERSION="${DATE_VERSION}-${GIT_SHORT_SHA}"
            echo "version=${AUTO_VERSION}" >> $GITHUB_OUTPUT
            echo "Using auto-generated version: ${AUTO_VERSION}"
          fi
      - name: Check for OpenSSL Linux (x64)
        id: check-openssl-linux-x64
        uses: dawidd6/action-download-artifact@v3
        continue-on-error: true
        with: { github_token: "${{ secrets.GITHUB_TOKEN }}", repo: "${{ env.COMPILE_REPO }}", workflow: "openssl-3.5-linux.yaml", name: "openssl-${{ env.OPENSSL_VERSION }}-x64-linux-portable", if_no_artifact_found: fail }
      - name: Check for OpenSSL Windows (x64)
        id: check-openssl-win-x64
        continue-on-error: true
        uses: dawidd6/action-download-artifact@v3
        with: { github_token: "${{ secrets.GITHUB_TOKEN }}", repo: "${{ env.COMPILE_REPO }}", workflow: "openssl-3.5-windows.yaml", name: "openssl-${{ env.OPENSSL_VERSION }}-win64-portable", if_no_artifact_found: fail }
      - name: Check for OpenSSL macOS (x64)
        id: check-openssl-macos-x64
        continue-on-error: true
        uses: dawidd6/action-download-artifact@v3
        with: { github_token: "${{ secrets.GITHUB_TOKEN }}", repo: "${{ env.COMPILE_REPO }}", workflow: "openssl-3.5-macos.yaml", name: "openssl-${{ env.OPENSSL_VERSION }}-x64-macos-portable", if_no_artifact_found: fail }
      - name: Check for OpenSSL macOS (arm64)
        id: check-openssl-macos-arm64
        continue-on-error: true
        uses: dawidd6/action-download-artifact@v3
        with: { github_token: "${{ secrets.GITHUB_TOKEN }}", repo: "${{ env.COMPILE_REPO }}", workflow: "openssl-3.5-macos.yaml", name: "openssl-${{ env.OPENSSL_VERSION }}-arm64-macos-portable", if_no_artifact_found: fail }
      - name: Check for OQS Provider Linux (x64)
        id: check-oqs-linux-x64
        continue-on-error: true
        uses: dawidd6/action-download-artifact@v3
        with: { github_token: "${{ secrets.GITHUB_TOKEN }}", repo: "${{ env.COMPILE_REPO }}", workflow: "Build-oqs-provider-v0.7.yml", name: "oqs-provider-linux-amd64", if_no_artifact_found: fail }
      - name: Check for OQS Provider Windows (x64)
        id: check-oqs-win-x64
        continue-on-error: true
        uses: dawidd6/action-download-artifact@v3
        with: { github_token: "${{ secrets.GITHUB_TOKEN }}", repo: "${{ env.COMPILE_REPO }}", workflow: "Build-oqs-provider-v0.7.yml", name: "oqs-provider-windows-amd64", if_no_artifact_found: fail }
      - name: Check for OQS Provider macOS (x64)
        id: check-oqs-macos-x64
        continue-on-error: true
        uses: dawidd6/action-download-artifact@v3
        with: { github_token: "${{ secrets.GITHUB_TOKEN }}", repo: "${{ env.COMPILE_REPO }}", workflow: "Build-oqs-provider-v0.7.yml", name: "oqs-provider-macos-amd64", if_no_artifact_found: fail }
      - name: Check for OQS Provider macOS (arm64)
        id: check-oqs-macos-arm64
        continue-on-error: true
        uses: dawidd6/action-download-artifact@v3
        with: { github_token: "${{ secrets.GITHUB_TOKEN }}", repo: "${{ env.COMPILE_REPO }}", workflow: "Build-oqs-provider-v0.7.yml", name: "oqs-provider-macos-arm64", if_no_artifact_found: fail }

      - name: Report final dependency status
        id: report-status
        shell: bash
        run: |
          if [[ "${{ steps.check-openssl-linux-x64.outcome }}" == "success" && "${{ steps.check-openssl-win-x64.outcome }}" == "success" && "${{ steps.check-openssl-macos-x64.outcome }}" == "success" && "${{ steps.check-openssl-macos-arm64.outcome }}" == "success" ]]; then
            echo "openssl-found=true" >> $GITHUB_OUTPUT; echo "✅ All OpenSSL artifacts found."
          else
            echo "openssl-found=false" >> $GITHUB_OUTPUT; echo "❌ Missing one or more OpenSSL artifacts."
          fi
          if [[ "${{ steps.check-oqs-linux-x64.outcome }}" == "success" && "${{ steps.check-oqs-win-x64.outcome }}" == "success" && "${{ steps.check-oqs-macos-x64.outcome }}" == "success" && "${{ steps.check-oqs-macos-arm64.outcome }}" == "success" ]]; then
            echo "oqs-found=true" >> $GITHUB_OUTPUT; echo "✅ All OQS Provider artifacts found."
          else
            echo "oqs-found=false" >> $GITHUB_OUTPUT; echo "❌ Missing one or more OQS Provider artifacts."
          fi
  # ------------------------------------------------------------------
  # 2a. NOTIFY MISSING DEPENDENCIES (Conditional)
  # ------------------------------------------------------------------
  notify-missing-dependencies:
    needs: check-dependencies
    runs-on: ubuntu-latest
    if: needs.check-dependencies.outputs.openssl-exists != 'true' || needs.check-dependencies.outputs.oqs-exists != 'true'
    steps:
      - name: Report missing dependencies and fail
        run: |
          echo "::error::Cannot proceed with release due to missing dependencies."
          if [[ "${{ needs.check-dependencies.outputs.openssl-exists }}" != "true" ]]; then
            echo "::error::OpenSSL artifacts not found. Please run the OpenSSL build workflows in ${{ env.COMPILE_REPO }}."
          fi
          if [[ "${{ needs.check-dependencies.outputs.oqs-exists }}" != "true" ]]; then
            echo "::error::OQS Provider artifacts not found. Please run the OQS Provider build workflow in ${{ env.COMPILE_REPO }}."
          fi
          exit 1
  # ------------------------------------------------------------------
  # 2b. BUILD AND PACKAGE (Conditional)
  # ------------------------------------------------------------------
  build-and-package:
    needs: check-dependencies
    if: needs.check-dependencies.outputs.openssl-exists == 'true' && needs.check-dependencies.outputs.oqs-exists == 'true'
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: ubuntu-latest
            platform: linux
            arch: x64
            openssl-workflow: "openssl-3.5-linux.yaml"
            openssl-artifact: "openssl-3.5.0-x64-linux-portable" # Corrected
            oqs-artifact: "oqs-provider-linux-amd64"
            zcert-name: linux
            oqs-ext: .so
            go-os: linux
            go-arch: amd64
          - os: windows-latest
            platform: windows
            arch: x64
            openssl-workflow: "openssl-3.5-windows.yaml"
            openssl-artifact: "openssl-3.5.0-win64-portable" # Corrected
            oqs-artifact: "oqs-provider-windows-amd64"
            zcert-name: windows
            oqs-ext: .dll
            go-os: windows
            go-arch: amd64
          - os: macos-latest
            platform: macos
            arch: x64
            openssl-workflow: "openssl-3.5-macos.yaml"
            openssl-artifact: "openssl-3.5.0-x64-macos-portable" # Corrected
            oqs-artifact: "oqs-provider-macos-amd64"
            zcert-name: darwin
            oqs-ext: .dylib
            go-os: darwin
            go-arch: amd64
          - os: macos-latest
            platform: macos
            arch: arm64
            openssl-workflow: "openssl-3.5-macos.yaml"
            openssl-artifact: "openssl-3.5.0-arm64-macos-portable" # Corrected
            oqs-artifact: "oqs-provider-macos-arm64"
            zcert-name: darwin_arm
            oqs-ext: .dylib
            go-os: darwin
            go-arch: arm64
    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-go@v5
        with: { go-version: 'stable' }

      - name: Build zcert
        env:
          GOOS: "${{ matrix.go-os }}"
          GOARCH: "${{ matrix.go-arch }}"
          CGO_ENABLED: 0
        shell: bash
        run: |
          VERSION="${{ needs.check-dependencies.outputs.version }}"
          GIT_COMMIT=$(git rev-parse --short HEAD)
          BUILD_TIME=$(date -u '+%Y%m%d.%H%M%S')
          GO_VERSION=$(go version | awk '{print $3}')
          LDFLAGS="-X main.Version=${VERSION} -X main.GitCommit=${GIT_COMMIT} -X main.BuildTime=${BUILD_TIME} -X main.GoVersion=${GO_VERSION}"
          go build -v -ldflags "${LDFLAGS}" -o zcert${{ matrix.platform == 'windows' && '.exe' || '' }} main.go
      - name: Download OpenSSL artifact
        uses: dawidd6/action-download-artifact@v3
        with: { github_token: "${{ secrets.GITHUB_TOKEN }}", repo: "${{ env.COMPILE_REPO }}", workflow: "${{ matrix.openssl-workflow }}", name: "${{ matrix.openssl-artifact }}", path: "openssl-artifact" }

      - name: Download oqs-provider artifact
        uses: dawidd6/action-download-artifact@v3
        with: { github_token: "${{ secrets.GITHUB_TOKEN }}", repo: "${{ env.COMPILE_REPO }}", workflow: "Build-oqs-provider-v0.7.yml", name: "${{ matrix.oqs-artifact }}", path: "oqs-artifact" }

      - name: Prepare and verify package contents
        id: package
        shell: bash
        run: |
          echo "--- Verifying downloaded artifacts ---"
          echo "OpenSSL artifact contents:"
          ls -R openssl-artifact
          echo "OQS Provider artifact contents:"
          ls -R oqs-artifact
          
          # Create a clean package directory
          mkdir -p package
          # Define expected executables and libraries
          ZCERT_EXE="zcert${{ matrix.platform == 'windows' && '.exe' || '' }}"
          OPENSSL_EXE="openssl${{ matrix.platform == 'windows' && '.exe' || '' }}"
          OQS_LIB="oqsprovider${{ matrix.oqs-ext }}"
          # Copy main binary - our own compiled binary should be in the root
          cp $ZCERT_EXE package/
          if [[ "${{ matrix.platform }}" != "windows" ]]; then chmod +x package/$ZCERT_EXE; fi
          # Handle OpenSSL artifacts (recursively if needed)
          if find openssl-artifact -type f -name "*.zip" | grep -q .; then
            echo "WARNING: OpenSSL artifact contains zip files"
            mkdir -p openssl-extracted
            # Extract all zip files found recursively
            for zipfile in $(find openssl-artifact -name "*.zip"); do
              echo "Extracting: $zipfile"
              unzip -o "$zipfile" -d openssl-extracted
            done
            # Look for the OpenSSL executable in the extracted files
            if find openssl-extracted -type f -name "$OPENSSL_EXE" | grep -q .; then
              find openssl-extracted -type f -name "$OPENSSL_EXE" -exec cp {} package/ \;
              echo "✅ Found and copied OpenSSL executable from extracted files"
            else
              # Fallback to the original artifacts
              find openssl-artifact -type f -name "$OPENSSL_EXE" -exec cp {} package/ \;
            fi
          else
            # No zip files found, use normal find
            find openssl-artifact -type f -name "$OPENSSL_EXE" -exec cp {} package/ \;
          fi
          # Handle OQS Provider artifacts (recursively if needed)
          if find oqs-artifact -type f -name "*.zip" | grep -q .; then
            echo "WARNING: OQS Provider artifact contains zip files"
            mkdir -p oqs-extracted
            # Extract all zip files found recursively
            for zipfile in $(find oqs-artifact -name "*.zip"); do
              echo "Extracting: $zipfile"
              unzip -o "$zipfile" -d oqs-extracted
            done
            # Look for the OQS library in the extracted files
            if find oqs-extracted -type f -name "$OQS_LIB" | grep -q .; then
              find oqs-extracted -type f -name "$OQS_LIB" -exec cp {} package/ \;
              echo "✅ Found and copied OQS library from extracted files"
            else
              # Fallback to the original artifacts
              find oqs-artifact -type f -name "$OQS_LIB" -exec cp {} package/ \;
            fi
          else
            # No zip files found, use normal find
            find oqs-artifact -type f -name "$OQS_LIB" -exec cp {} package/ \;
          fi
          # Make OpenSSL executable on non-Windows platforms
          if [[ "${{ matrix.platform }}" != "windows" && -f "package/$OPENSSL_EXE" ]]; then
            chmod +x package/$OPENSSL_EXE
          fi
          echo "--- Verifying final package contents ---"
          ls -la package/
          # Create a README.txt file to explain the package contents
          if [[ "${{ matrix.platform }}" == "windows" ]]; then
            echo "zcert - CyberArk Zero Touch PKI CLI Tool v${{ needs.check-dependencies.outputs.version }}" > package/README.txt
            echo "" >> package/README.txt
            echo "This package contains:" >> package/README.txt
            echo "- zcert.exe - The main application" >> package/README.txt
            echo "- openssl.exe - OpenSSL v${{ env.OPENSSL_VERSION }}" >> package/README.txt
            echo "- oqsprovider.dll - OpenQuantumSafe Provider v${{ env.OQS_PROVIDER_VERSION }}" >> package/README.txt
            echo "" >> package/README.txt
            echo "These files are required for zcert to function properly." >> package/README.txt
            echo "For more information, visit: https://github.com/${{ github.repository }}" >> package/README.txt
          else
            echo "zcert - CyberArk Zero Touch PKI CLI Tool v${{ needs.check-dependencies.outputs.version }}" > package/README.txt
            echo "" >> package/README.txt
            echo "This package contains:" >> package/README.txt
            echo "- zcert - The main application" >> package/README.txt
            echo "- openssl - OpenSSL v${{ env.OPENSSL_VERSION }}" >> package/README.txt
            echo "- oqsprovider${{ matrix.oqs-ext }} - OpenQuantumSafe Provider v${{ env.OQS_PROVIDER_VERSION }}" >> package/README.txt
            echo "" >> package/README.txt
            echo "These files are required for zcert to function properly." >> package/README.txt
            echo "For more information, visit: https://github.com/${{ github.repository }}" >> package/README.txt
          fi
          # CRITICAL: Verify that all necessary files exist in the package folder before zipping
          if ! [ -f "package/$ZCERT_EXE" ] || ! [ -f "package/$OPENSSL_EXE" ] || ! [ -f "package/$OQS_LIB" ]; then
            echo "::error::A required file was not found in the final package directory. Aborting."
            exit 1
          fi
          echo "✅ All required files are present in the package directory."
      - name: Create release archive and checksum
        shell: bash
        run: |
          PKG_NAME="zcert_v${{ needs.check-dependencies.outputs.version }}_${{ matrix.zcert-name }}.zip"
          
          if [[ "${{ matrix.platform }}" == "windows" ]]; then
            # For Windows, create a package with zcert.exe inside the internal zip
            echo "Creating Windows package with zcert.exe inside internal zip..."
            
            # First, create a full internal zip containing all files
            mkdir -p zcert_package
            cp package/zcert.exe package/openssl.exe package/oqsprovider.dll package/README.txt zcert_package/
            
            # Use PowerShell to create a proper zip archive
            pwsh -Command "Compress-Archive -Path './zcert_package/*' -DestinationPath './zcert-windows-files.zip' -Force"
            echo "✅ Created zcert-windows-files.zip with all files"
            
            # Create the final package structure
            mkdir -p final_package
            cp zcert-windows-files.zip final_package/
            
            # Create a new README.txt explaining the structure
            echo "zcert - CyberArk Zero Touch PKI CLI Tool v${{ needs.check-dependencies.outputs.version }}" > final_package/README.txt
            echo "" >> final_package/README.txt
            echo "This package contains:" >> final_package/README.txt
            echo "- zcert-windows-files.zip - Contains all required files:" >> final_package/README.txt
            echo "  - zcert.exe - The main application" >> final_package/README.txt
            echo "  - openssl.exe - OpenSSL v${{ env.OPENSSL_VERSION }}" >> final_package/README.txt
            echo "  - oqsprovider.dll - OpenQuantumSafe Provider v${{ env.OQS_PROVIDER_VERSION }}" >> final_package/README.txt
            echo "" >> final_package/README.txt
            echo "IMPORTANT: Extract zcert-windows-files.zip to use the application." >> final_package/README.txt
            echo "All files must be kept in the same directory for proper functionality." >> final_package/README.txt
            echo "" >> final_package/README.txt
            echo "For more information, visit: https://github.com/${{ github.repository }}" >> final_package/README.txt
            
            # Verify final package contents
            echo "Final package structure:"
            ls -la final_package/
            
            # Create the final package using PowerShell for better Windows compatibility
            pwsh -Command "Compress-Archive -Path './final_package/*' -DestinationPath './$PKG_NAME' -Force"
            echo "✅ Created final Windows package with zcert.exe inside zcert-windows-files.zip"
            
            # Generate SHA1 hash with PowerShell
            pwsh -Command "Get-FileHash -Algorithm SHA1 $PKG_NAME | ForEach-Object { \$_.Hash.ToLower() } | Out-File -FilePath ${PKG_NAME}.sha1 -NoNewline -Encoding utf8"
          else
            # For non-Windows platforms use zip command
            cd package
            zip -r ../$PKG_NAME *
            cd ..
            shasum -a 1 $PKG_NAME | cut -d' ' -f1 > ${PKG_NAME}.sha1
          fi
          
          echo "SHA1 checksum:"
          cat ${PKG_NAME}.sha1
      - name: Upload release artifact
        uses: actions/upload-artifact@v4
        with:
          name: zcert-${{ matrix.zcert-name }}
          path: |
            zcert_v${{ github.event.inputs.version }}_${{ matrix.zcert-name }}.zip
            zcert_v${{ github.event.inputs.version }}_${{ matrix.zcert-name }}.zip.sha1
  # ------------------------------------------------------------------
  # 3. CREATE RELEASE
  # ------------------------------------------------------------------
  create-release:
    needs: [check-dependencies, build-and-package]
    runs-on: ubuntu-latest
    steps:
      - name: Download all package artifacts
        uses: actions/download-artifact@v4
        with:
          path: release-artifacts

      - name: Prepare release assets and checksums file
        run: |
          mkdir -p release-assets temp-extract
          echo "Initial release artifacts:"
          find release-artifacts -type f | sort
          
          # Directly copy the zip and sha1 files to release-assets (avoid nested directories)
          for artifact_dir in release-artifacts/*; do
            if [ -d "$artifact_dir" ]; then
              echo "Processing artifact directory: $artifact_dir"
              
              # Find zip files that are directly in the artifact directory (not nested)
              for zip_file in $(find "$artifact_dir" -maxdepth 1 -type f -name "*.zip"); do
                # Verify this is a real zip file, not a directory
                if [ -f "$zip_file" ]; then
                  echo "Copying zip file: $zip_file"
                  
                  # Get the basename without directory path
                  base_name=$(basename "$zip_file")
                  
                  # Check if this is a proper zip file (not a renamed directory)
                  file_type=$(file -b "$zip_file" | grep -i "zip" || echo "")
                  if [[ -z "$file_type" ]]; then
                    echo "WARNING: $zip_file appears not to be a proper zip file. Skipping."
                    continue
                  fi
                  
                  # Verify it's not a nested zip by extracting and checking contents
                  rm -rf temp-extract/*
                  unzip -l "$zip_file" | grep -i "\.zip$" > /dev/null
                  if [ $? -eq 0 ]; then
                    echo "WARNING: $zip_file contains nested zip files. Extracting to avoid zip-in-zip..."
                    mkdir -p "temp-extract/$base_name"
                    unzip -q "$zip_file" -d "temp-extract/$base_name"
                    
                    # Create a new clean zip without nested zips
                    cd "temp-extract/$base_name"
                    zip -r "../fixed_$base_name" *
                    cd ../../
                    mv "temp-extract/fixed_$base_name" "release-assets/$base_name"
                    echo "Created clean version of $base_name without nested zips"
                  else
                    # No nested zips, copy as is
                    # Ensure the file has a .zip extension
                    if [[ "$base_name" != *.zip ]]; then
                      new_name="${base_name}.zip"
                      cp "$zip_file" "release-assets/$new_name"
                      echo "Renamed $base_name to $new_name"
                    else
                      cp "$zip_file" release-assets/
                    fi
                  fi
                  
                  # Copy corresponding sha1 file if it exists
                  sha_file="${zip_file}.sha1"
                  if [ -f "$sha_file" ]; then
                    echo "Copying sha1 file: $sha_file"
                    cp "$sha_file" "release-assets/${base_name}.sha1"
                  fi
                fi
              done
            fi
          done
          
          cd release-assets
          echo "Release assets contents:"
          ls -la
          
          # Create the release notes markdown file - need to escape special chars for YAML
          version="${{ needs.check-dependencies.outputs.version }}"
          openssl_version="${{ env.OPENSSL_VERSION }}"
          oqs_version="${{ env.OQS_PROVIDER_VERSION }}"
          repo="${{ github.repository }}"
          
          {
            echo "# zcert v${version} - initial release"
            echo ""
            echo "A security-hardened command-line certificate management tool for CyberArk's Zero"
            echo "Touch PKI (ZTPKI) service with post-quantum cryptography support."
            echo ""
            echo ""
            echo "## Package Components"
            echo ""
            echo "| Component | Version |"
            echo "| zcert | ${version} |"
            echo "| OpenSSL | ${openssl_version} |"
            echo "| OQS Provider | ${oqs_version} |"
            echo ""
            echo "\`\`\`"
            
            # Linux amd64
            if [ -f "zcert_v${version}_linux.zip" ] && [ -f "zcert_v${version}_linux.zip.sha1" ]; then
              sha1sum=$(cat "zcert_v${version}_linux.zip.sha1")
              echo "${sha1sum} zcert_v${version}_linux.zip"
            fi
            
            # Windows amd64
            if [ -f "zcert_v${version}_windows.zip" ] && [ -f "zcert_v${version}_windows.zip.sha1" ]; then
              sha1sum=$(cat "zcert_v${version}_windows.zip.sha1")
              echo "${sha1sum} zcert_v${version}_windows.zip"
            fi
            
            # macOS amd64
            if [ -f "zcert_v${version}_darwin.zip" ] && [ -f "zcert_v${version}_darwin.zip.sha1" ]; then
              sha1sum=$(cat "zcert_v${version}_darwin.zip.sha1")
              echo "${sha1sum} zcert_v${version}_darwin.zip"
            fi
            
            # macOS arm64
            if [ -f "zcert_v${version}_darwin_arm.zip" ] && [ -f "zcert_v${version}_darwin_arm.zip.sha1" ]; then
              sha1sum=$(cat "zcert_v${version}_darwin_arm.zip.sha1")
              echo "${sha1sum} zcert_v${version}_darwin_arm.zip"
            fi
            
            echo "\`\`\`"
            
          } > release_notes.md
          
          echo "Final release notes contents:"
          cat release_notes.md
      - name: Create Draft Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: v${{ needs.check-dependencies.outputs.version }}
          name: zcert v${{ needs.check-dependencies.outputs.version }}
          body_path: release-assets/release_notes.md
          draft: true
          files: |
            release-assets/*.zip