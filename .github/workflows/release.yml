name: Release zcert

on:
  workflow_dispatch:
    inputs:
      version:
        description: 'Release version (e.g., 1.2.0)'
        required: true
        default: '1.2.0'

permissions:
  contents: write # Needed for creating releases and uploading assets
  actions: read   # Needed for dawidd6/action-download-artifact to list workflow runs/artifacts in other repos

env:
  OPENSSL_VERSION: "3.5.0"
  OQS_PROVIDER_VERSION: "0.7.0"
  COMPILE_REPO: "tall27/compile" # The repository where OpenSSL and OQS Provider build workflows run and upload artifacts

jobs:
  # The 'check-dependencies' job is removed.
  # The logic for checking artifact existence is now integrated directly into the 'build-and-package' job
  # using 'dawidd6/action-download-artifact', which will fail the job if dependencies are not found.

  build-and-package:
    strategy:
      fail-fast: false # Allows other matrix jobs to continue even if one platform build fails
      matrix:
        include:
          - os: ubuntu-latest
            platform: linux
            arch: x64
            openssl-expected-artifact: "openssl-3.5.0-x64-linux-portable"
            openssl-build-workflow: "openssl-3.5-linux.yaml" # Confirmed from your images
            oqs-expected-artifact: "oqsprovider-linux-x64"
            oqs-build-workflow: "Build-oqs-provider-v0.7.yml" # Confirmed from your input
            zcert-name: linux
            oqs-ext: .so
            go-os: linux
            go-arch: amd64

          - os: windows-latest
            platform: windows
            arch: x64
            openssl-expected-artifact: "openssl-3.5.0-win64-portable"
            openssl-build-workflow: "openssl-3.5-windows.yaml" # Confirmed from your images
            oqs-expected-artifact: "oqsprovider-windows-x64"
            oqs-build-workflow: "Build-oqs-provider-v0.7.yml" # Confirmed from your input
            zcert-name: windows
            oqs-ext: .dll
            go-os: windows
            go-arch: amd64

          - os: macos-latest
            platform: macos
            arch: x64
            openssl-expected-artifact: "openssl-3.5.0-x64-macos-portable"
            openssl-build-workflow: "openssl-3.5-macos.yaml" # Confirmed from your images
            oqs-expected-artifact: "oqsprovider-macos-x64"
            oqs-build-workflow: "Build-oqs-provider-v0.7.yml" # Confirmed from your input
            zcert-name: darwin
            oqs-ext: .dylib
            go-os: darwin
            go-arch: amd64

          - os: macos-latest
            platform: macos
            arch: arm64
            openssl-expected-artifact: "openssl-3.5.0-arm64-macos-portable"
            openssl-build-workflow: "openssl-3.5-macos.yaml" # Confirmed from your images
            oqs-expected-artifact: "oqsprovider-macos-arm64"
            oqs-build-workflow: "Build-oqs-provider-v0.7.yml" # Confirmed from your input
            zcert-name: darwin_arm
            oqs-ext: .dylib
            go-os: darwin
            go-arch: arm64

    runs-on: ${{ matrix.os }}
    steps:
      - name: Checkout zcert repository
        uses: actions/checkout@v4

      - name: Setup Go
        uses: actions/setup-go@v5
        with:
          go-version: 'stable'

      - name: Build zcert
        env:
          GOOS: ${{ matrix.go-os }}
          GOARCH: ${{ matrix.go-arch }}
        run: |
          echo "Building zcert for ${{ matrix.platform }} ${{ matrix.arch }}"
          go build -o zcert${{ matrix.platform == 'windows' && '.exe' || '' }} ./cmd/zcert
          echo "zcert binary built."

      - name: Download OpenSSL artifact
        id: download-openssl
        uses: dawidd6/action-download-artifact@v3
        with:
          github_token: ${{ github.token }}
          workflow: ${{ matrix.openssl-build-workflow }} # Name of the workflow file in COMPILE_REPO
          workflow_conclusion: success # Only download if the source workflow run was successful
          name: ${{ matrix.openssl-expected-artifact }} # Exact name of the artifact to download
          repo: ${{ env.COMPILE_REPO }} # Repository where the artifact is located
          path: openssl-artifact # Directory to download the artifact into
        # This step will fail if the artifact is not found in a successful run,
        # effectively acting as an existence check.

      - name: Download oqs-provider artifact
        id: download-oqs
        uses: dawidd6/action-download-artifact@v3
        with:
          github_token: ${{ github.token }}
          workflow: ${{ matrix.oqs-build-workflow }} # Name of the workflow file in COMPILE_REPO
          workflow_conclusion: success # Only download if the source workflow run was successful
          name: ${{ matrix.oqs-expected-artifact }} # Exact name of the artifact to download
          repo: ${{ env.COMPILE_REPO }} # Repository where the artifact is located
          path: oqs-artifact # Directory to download the artifact into
        # This step will fail if the artifact is not found in a successful run.
        
      - name: Debug: List downloaded OpenSSL artifact content
        run: |
          echo "Contents of openssl-artifact:"
          # Use 'ls -R' to recursively list contents, '|| true' to prevent step failure if dir is empty/missing
          ls -R openssl-artifact/ || echo "openssl-artifact directory not found or empty."

      - name: Debug: List downloaded OQS Provider artifact content
        run: |
          echo "Contents of oqs-artifact:"
          ls -R oqs-artifact/ || echo "oqs-artifact directory not found or empty."

      - name: Extract and package
        shell: bash
        run: |
          echo "Starting extraction and packaging for ${{ matrix.platform }} ${{ matrix.arch }}"
          # Create package directory
          mkdir -p package

          # Copy zcert binary
          if [[ "${{ matrix.platform }}" == "windows" ]]; then
            cp zcert.exe package/
          else
            cp zcert package/
            chmod +x package/zcert
          fi

          # Copy OpenSSL from artifact
          # IMPORTANT: You MUST verify the exact path to the executable inside the downloaded artifact.
          # Use the output from the "Debug: List downloaded OpenSSL artifact content" step.
          # Example: If 'ls -R openssl-artifact/' shows 'openssl-artifact/openssl-3.5.0-x64-linux-portable/bin/openssl',
          # then your 'cp' source path should be 'openssl-artifact/${{ matrix.openssl-expected-artifact }}/bin/openssl'
          echo "Copying OpenSSL..."
          if [[ "${{ matrix.platform }}" == "windows" ]]; then
            cp openssl-artifact/openssl.exe package/ # Adjust this path if the exe is nested
          else
            cp openssl-artifact/openssl package/ # Adjust this path if the executable is nested
            chmod +x package/openssl
          fi
          # Copy README if exists (adjust path if needed based on 'ls -R openssl-artifact/')
          if [ -f openssl-artifact/README.txt ]; then
            cp openssl-artifact/README.txt package/openssl-README.txt
          fi

          # Copy oqs-provider
          # IMPORTANT: You MUST verify the exact path to the oqsprovider file inside the downloaded artifact.
          # Use the output from the "Debug: List downloaded OQS Provider artifact content" step.
          # Example: If `ls -R oqs-artifact/` shows `oqs-artifact/oqsprovider-linux-x64/lib/oqsprovider.so`,
          # then your `find` command might need adjustment, or a direct `cp` if it's a simple file.
          echo "Copying OQS Provider..."
          find oqs-artifact -name "oqsprovider${{ matrix.oqs-ext }}" -exec cp {} package/ \;

          # List package contents for final verification
          echo "Package contents:"
          ls -la package/

          # Create the release zip
          echo "Creating release zip..."
          cd package
          if [[ "${{ matrix.platform }}" == "windows" ]]; then
            7z a ../zcert_v${{ github.event.inputs.version }}_${{ matrix.zcert-name }}.zip *
          else
            zip -r ../zcert_v${{ github.event.inputs.version }}_${{ matrix.zcert-name }}.zip *
          fi
          cd ..
          echo "Release zip created."

          # Generate SHA1 checksum
          echo "Generating SHA1 checksum..."
          if [[ "${{ matrix.platform }}" == "windows" ]]; then
            certutil -hashfile zcert_v${{ github.event.inputs.version }}_${{ matrix.zcert-name }}.zip SHA1 | findstr /v ":" | findstr /v "CertUtil" > zcert_v${{ github.event.inputs.version }}_${{ matrix.zcert-name }}.zip.sha1
          else
            shasum -a 1 zcert_v${{ github.event.inputs.version }}_${{ matrix.zcert-name }}.zip | cut -d' ' -f1 > zcert_v${{ github.event.inputs.version }}_${{ matrix.zcert-name }}.zip.sha1
          fi

          # Display checksum for verification
          echo "SHA1 checksum:"
          cat zcert_v${{ github.event.inputs.version }}_${{ matrix.zcert-name }}.zip.sha1

      - name: Upload release artifact
        uses: actions/upload-artifact@v4
        with:
          name: zcert-${{ matrix.zcert-name }}
          path: |
            zcert_v${{ github.event.inputs.version }}_${{ matrix.zcert-name }}.zip
            zcert_v${{ github.event.inputs.version }}_${{ matrix.zcert-name }}.zip.sha1
        # These artifacts are uploaded to the current workflow run,
        # and then downloaded by the 'create-release' job.

  create-release:
    needs: build-and-package # This job will run only after all matrix jobs in 'build-and-package' complete successfully
    runs-on: ubuntu-latest
    steps:
      - name: Checkout zcert repository
        uses: actions/checkout@v4

      - name: Download all platform-specific artifacts
        uses: actions/download-artifact@v4
        with:
          path: release-artifacts # All artifacts from 'build-and-package' will be downloaded here

      - name: Prepare release assets
        run: |
          echo "Preparing release assets..."
          mkdir -p release-files
          # Move all zip and sha1 files from the downloaded artifacts into a single 'release-files' directory
          find release-artifacts -name "*.zip" -o -name "*.sha1" | while read file; do
            cp "$file" release-files/
          done

          # Create combined SHA1 checksum file for all packages
          echo "Creating combined checksums.txt..."
          cd release-files
          echo "# SHA1 checksums for zcert v${{ github.event.inputs.version }}" > checksums.txt
          echo "" >> checksums.txt
          for sha1file in *.sha1; do
            if [ -f "$sha1file" ]; then
              sha1sum=$(cat "$sha1file")
              filename="${sha1file%.sha1}" # Remove .sha1 extension
              echo "${sha1sum}  ${filename}" >> checksums.txt
            fi
          done

          # List all files for verification before creating the release
          echo "Final release files to be uploaded:"
          ls -la

      - name: Create Draft Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: v${{ github.event.inputs.version }} # Uses the version input from workflow_dispatch
          name: zcert v${{ github.event.inputs.version }}
          body: |
            ## zcert v${{ github.event.inputs.version }}

            ### Changes
            - TODO: Add release notes here # IMPORTANT: Update this with actual release notes!

            ### Components
            - zcert v${{ github.event.inputs.version }}
            - OpenSSL ${{ env.OPENSSL_VERSION }}
            - oqs-provider ${{ env.OQS_PROVIDER_VERSION }}

            ### Downloads
            See assets below for platform-specific packages.

            ### Checksums
            SHA1 checksums are provided for each package.
          draft: true # Set to 'false' to publish immediately, 'true' to create a draft
          files: |
            release-files/*.zip # Upload all generated zip packages
            release-files/checksums.txt # Upload the combined checksum file
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} # Automatically provided token with write access
