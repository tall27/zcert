Function Get-HawkHeader {
    param(
        [Parameter(Mandatory=$True,Position=0)]
        [String]$Uri,
        [Parameter(Mandatory=$False,Position=1)]
        [ValidateSet("Delete","Get","Head","Options","Post","Patch")]
        [String]$Method="Get",
        [Parameter(Mandatory=$True,Position=2)]
        [String]$HawkID,
        [Parameter(Mandatory=$True,Position=3)]
        [String]$HawkKey,
        [String]$ContentType="application/json",
        [String]$Body
    )
    $uriParse = [System.Uri]::new($Uri)
    $now = [int]((New-TimeSpan -Start (Get-Date "01/01/1970") -End (Get-Date).ToUniversalTime()).TotalSeconds)
    $method = $Method.ToUpper()
    $path = $uriParse.PathAndQuery  # "/api/path/to/resource";
    $hostUri = $uriParse.Host       # "example.com";
    $port = $uriParse.Port          # 80;

    $chars = $(48..57;65..90;97..122)
    $nonce =  (1..6 | ForEach-Object {Get-Random -InputObject $chars} | ForEach-Object {[char]$_}) -join ""

    $payloadHash = $null
    if ($null -ne $Body) {
        # set payload hash here
        $payload = "hawk.1.payload" + "`n"
        $payload += $ContentType.split(",")[0].ToLower() + "`n"
        $payload += $Body + "`n"
        $hash = [System.Security.Cryptography.HashAlgorithm]::Create("SHA256") 
        $payloadHash = $hash.ComputeHash([System.Text.Encoding]::UTF8.GetBytes($payload))
        $payloadHash = [Convert]::ToBase64String($payloadHash)
    }
    $artifacts = "hawk.1.header" + "`n" + 
        $now + "`n" +
        $nonce + "`n" +
        $method + "`n" +
        $path + "`n" +
        $hostUri + "`n" +
        $port + "`n" +
        $payloadhash + "`n"

    $artifacts += "`n"

    $hmac = [System.Security.Cryptography.HMAC]::Create("HMACSHA256")
    $hmac.Key = [System.Text.Encoding]::UTF8.GetBytes($HawkKey)
    $signature = $hmac.ComputeHash([System.Text.Encoding]::UTF8.GetBytes($artifacts))
    $signature = [Convert]::ToBase64String($signature)

    $header = "Hawk id=`"$HawkID`", ts=`"$now`", nonce=`"$nonce`""
    if ($payloadhash){
        $header += ", hash=`"$payloadhash`""
    }

    $header += ", mac=`"$signature`""
    return $header
}

Function Invoke-RestMethodWithHawk {
    [Cmdletbinding()]
    param(
        [Parameter(Mandatory=$True,Position=0)]
        [String]$Uri,
        [Parameter(Mandatory=$False,Position=1)]
        [ValidateSet("Delete","Get","Head","Options","Post","Patch")]
        [String]$Method="Get",
        [Parameter(Mandatory=$True,Position=2)]
        [String]$HawkID,
        [Parameter(Mandatory=$True,Position=3)]
        [String]$HawkKey,
        [String]$ContentType="application/json",
        [String]$Body
    )

    $HawkParams = @{
        Uri = $Uri
        Method = $Method
        HawkID = $HawkID
        HawkKey = $HawkKey
        ContentType = $ContentType
        Body = $Body
    }

    $hawkHeader = Get-HawkHeader @HawkParams

    $invokeParams = @{
        Uri = $Uri
        Method = $Method
        ContentTYpe = $ContentType
        Headers = @{ Authorization = $hawkHeader }
    }

    if (($null -ne $Body) -and ($Body -ne "")) {
        $invokeParams.Add("Body", $Body)
    }
    return Invoke-RestMethod @invokeParams
}

Function Invoke-WebRequestWithHawk {
    [Cmdletbinding()]
    param(
        [Parameter(Mandatory=$True,Position=0)]
        [String]$Uri,
        [Parameter(Mandatory=$False,Position=1)]
        [ValidateSet("Delete","Get","Head","Options","Post","Patch")]
        [String]$Method="Get",
        [Parameter(Mandatory=$True,Position=2)]
        [String]$HawkID,
        [Parameter(Mandatory=$True,Position=3)]
        [String]$HawkKey,
        [String]$ContentType="application/json",
        [String]$Body
    )

    $HawkParams = @{
        Uri = $Uri
        Method = $Method
        HawkID = $HawkID
        HawkKey = $HawkKey
        ContentType = $ContentType
        Body = $Body
    }

    $hawkHeader = Get-HawkHeader @HawkParams

    $invokeParams = @{
        Uri = $Uri
        Method = $Method
        ContentTYpe = $ContentType
        Headers = @{ Authorization = $hawkHeader }
    }

    if (($null -ne $Body) -and ($Body -ne "")) {
        $invokeParams.Add("Body", $Body)
    }
    return (Invoke-WebRequest @invokeParams).Content
}

