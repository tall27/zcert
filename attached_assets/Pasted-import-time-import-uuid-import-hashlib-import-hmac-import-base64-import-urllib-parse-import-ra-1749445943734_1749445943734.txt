import time
import uuid
import hashlib
import hmac
import base64
import urllib.parse
import random

def generate_nonce(length=6):
    chars = list("0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz")
    return "".join(random.choice(chars) for _ in range(length))

def get_hawk_header(uri, method, hawk_id, hawk_key, content_type="application/json", body=None):
    """
    Builds a HAWK Authorization header.
    
    :param uri: Full URI (e.g. "https://example.com/api/path")
    :param method: HTTP method (e.g. "GET", "POST")
    :param hawk_id: The Hawk ID (client identifier)
    :param hawk_key: The Hawk key (shared secret)
    :param content_type: Content-Type of the payload; used to compute payload hash if body is provided.
    :param body: The request payload as a string (or None)
    :return: The Authorization header value.
    """
    # Parse the URI
    parsed = urllib.parse.urlparse(uri)
    path = parsed.path
    if parsed.query:
        path += "?" + parsed.query
    host = parsed.hostname
    port = parsed.port or (443 if parsed.scheme == "https" else 80)
    
    ts = str(int(time.time()))
    nonce = generate_nonce(6)
    
    # Compute payload hash if body is provided
    payload_hash = ""
    if body is not None:
        # Build payload string per HAWK spec:
        # "hawk.1.payload\n{lowercase_content_type}\n{body}\n"
        payload_string = "hawk.1.payload\n" + content_type.split(",")[0].lower() + "\n" + body + "\n"
        sha256 = hashlib.sha256()
        sha256.update(payload_string.encode("utf-8"))
        payload_hash = base64.b64encode(sha256.digest()).decode("utf-8")
    
    # Build normalized string (artifacts) exactly as in the PowerShell example.
    artifacts = "\n".join([
        "hawk.1.header",
        ts,
        nonce,
        method.upper(),
        path,
        host,
        str(port),
        payload_hash,
        ""
    ]) + "\n"
    
    # Compute the HMAC SHA256 signature on the artifacts string.
    hmac_obj = hmac.new(hawk_key.encode("utf-8"), artifacts.encode("utf-8"), hashlib.sha256)
    signature = base64.b64encode(hmac_obj.digest()).decode("utf-8")
    
    # Build the final Authorization header.
    header = f'Hawk id="{hawk_id}", ts="{ts}", nonce="{nonce}"'
    if payload_hash:
        header += f', hash="{payload_hash}"'
    header += f', mac="{signature}"'
    return header

# For backward compatibility, you can also implement a Sender class if needed.
class Sender:
    def __init__(self, credentials, url, method, content, content_type):
        self.credentials = credentials
        self.url = url
        self.method = method
        self.content = content
        self.content_type = content_type
        
        self.header = get_hawk_header(
            uri=url,
            method=method,
            hawk_id=credentials["id"],
            hawk_key=credentials["key"],
            content_type=content_type,
            body=content
        )
    
    @property
    def request_header(self):
        return self.header
